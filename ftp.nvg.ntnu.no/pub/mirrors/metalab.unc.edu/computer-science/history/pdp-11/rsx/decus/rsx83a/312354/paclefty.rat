	SUBROUTINE LEFTY
	IMPLICIT INTEGER (A-Z)
#
#	THIS SUBROUTINE CONTROLS THE MOTION OF LEFTY.  LEFTY MOVES
#	AT 92% OF TOP SPEED, BUT DOES NOT FOLLOW PACMAN VERY WELL.
#	ON EARLY BOARDS, HE ONLY CHANGES DIRECTION WHEN HE 'SEES' PACMAN.
#
	INCLUDE/NL SY:UVT100.DAT
	INCLUDE/NL SY:PACMAN.CMN
	OLDDIR = LDIR
	IF (LPRISN == 1) [			#IF IN PRISON...
	  IF (STATE != BAD)			#DONT ESCAPE WHILE PACMAN
	    RETURN				#IS EATING
	  IF (LTIM+PRITIM <= TIMER) [		#IF TIME TO GET OUT,
	    CALL UVT100(CUP,LPRISR,LPRISC)	#ERASE LEFTY FROM PRISON
	    OUTBUF(LEN+1) = SPACE
	    LEN = LEN + 1
	    LROW = RDOOR
	    LCOL = CDOOR
	    CALL UVT100(CUP,LROW,LCOL)		#MOVE HIM TO PRISON DOOR
	    OUTBUF(LEN+1) = LMAN(STATE)
	    LEN = LEN + 1
	    LPRISN = 0				#NO LONGER IN PRISON
	    LDIR = HALT				#NO MOTION YET
	    ]
	  ELSE					#NOT YET TIME TO GET OUT
	    RETURN
	  ]
#
#	IF PACMAN IS IN EATING MOOD (STATE IS 'GOOD' OR 'BLINK'),
#	ALL MONSTERS MOVE AT 67% OF TOP SPEED. TEST FOR THIS CONDITION.
#
	IF (STATE != BAD .AND. MOVE(CYCLE,9) == 0) [
	  LDIR = OLDDIR
	  RETURN
	  ]
#
#	IF THIS IS A TUNNEL LOCATION, TEST IF MOTION ALLOWED THIS CYCLE
#
	IF (TSTBIT(MSTATE(LCOL,LROW),TUNNEL) == 1) [
	  IF (MOVE(CYCLE,3) == 0) [
	    LDIR = OLDDIR
	    RETURN
	    ]
	  ]
#
#	ELSE IF THIS IS A DECISION BIT, AND THE PACMAN IS ON THE SAME ROW
#	OR COLUMN AS WE ARE, CALL DECIDE TO SEE IF WE CHANGE DIRECTION.
#	(AFTER THE SECOND BOARD ALSO CALL DECIDE 50% OF THE TIME, AND
#	AFTER THE FOURTH BOARD, CALL DECIDE 67% OF THE TIME).
#
	ELSE IF (TSTBIT(MSTATE(LCOL,LROW),DECISN) == 1) [
	  IF (LROW == ROW .OR. LCOL == COL)
	    CALL DECIDE(LCOL,LROW,LDIR)
	  ELSE IF (BOARD > 2 .AND. BOARD < 5 .AND. MOVE(CYCLE,3) == 1)
	    CALL DECIDE(LCOL,LROW,LDIR)
	  ELSE IF (BOARD > 4 .AND. MOVE(CYCLE,9) == 1)
	    CALL DECIDE(LCOL,LROW,LDIR)
	  ]
#
#	IF WE HAVE RUN INTO A WALL, FIND A NEW DIRECTION
#
	IF (TSTBIT(MSTATE(LCOL,LROW),LDIR) == 0)
	  CALL WALL(LCOL,LROW,LDIR)
#
#	IF MOTION IS PROHIBITED THIS CYCLE, RESET OLD DIRECTION AND RETURN
#
	IF (MOVE(CYCLE,LDIR) == 0 .OR. MOVE(CYCLE,5) == 0) [
	  LDIR = OLDDIR
	  RETURN
	  ]
#
#	ALL READY TO MOVE
#
	CALL UVT100(CUP,LROW,LCOL)		#CURSOR TO CURRENT LOCATION
	IF (TSTBIT(MSTATE(LCOL,LROW),DOT) == 1) [
	  OUTBUF(LEN+1) = DOTCHR
	  LEN = LEN + 1
	  ]
	ELSE IF (TSTBIT(MSTATE(LCOL,LROW),EGZ) == 1) [
	  OUTBUF(LEN+1) = EGZCHR
	  LEN = LEN + 1
	  ]
	ELSE IF (FRUIT == 1 .AND. LCOL == FRUCOL .AND. LROW == FRUROW) [
	  OUTBUF(LEN+1) = FRUCHR(BOARD)
	  LEN = LEN + 1
	  ]
	ELSE [
	  OUTBUF(LEN+1) = SPACE
	  LEN = LEN + 1
	  ]
	IF (LDIR == LEFT)
	  LCOL = LCOL - 1
	ELSE IF (LDIR == UP)
	  LROW = LROW -1
	ELSE IF (LDIR == RIGHT)
	  LCOL = LCOL + 1
	ELSE IF (LDIR == DOWN)
	  LROW = LROW + 1
	IF (LCOL > CMAR)
	  LCOL = 1
	ELSE IF (LCOL < 1)
	  LCOL = CMAR
	IF (LROW > RMAR)
	  LROW = 1
	ELSE IF (LROW < 1)
	  LROW = RMAR
	CALL UVT100(CUP,LROW,LCOL)
	OUTBUF(LEN+1) = LMAN(STATE)
	LEN = LEN + 1
	CALL COLIDE				#TEST FOR COLLISION
	RETURN
	END
